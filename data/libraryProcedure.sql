USE Library



--CREATE ID_BOOK
GO
CREATE PROC GENERATE_IDBOOK
    @IDBOOK VARCHAR(7) OUT
AS
BEGIN
    SET @IDBOOK = 'BID_001'
    DECLARE @V_FRAME_IDBOOK VARCHAR(7) = 'BID_'
    DECLARE @I INT = 1

    WHILE(EXISTS(SELECT 1 FROM BOOK WHERE @IDBOOK = BID))
    BEGIN
        SET @IDBOOK = @V_FRAME_IDBOOK + REPLICATE('0', 3-LEN(@I)) + CAST(@I AS VARCHAR(3))
        SET @I = @I + 1
    END
END


--INSERT A BOOK
GO
CREATE PROC iNSERT_BOOK
   @TITTLE               varchar(50),
   @AUTHOR               varchar(20),
   @PUBLISHINGYEAR       integer    ,
   @GENRE                varchar(20),
   @COUNTRY              varchar(50),
   @LANGUAGE_BOOK        varchar(20),
   @PRICE                float      ,
   @DURATION             integer    ,
   @HASLEFT              integer    ,
   @PATHIMAGE            varchar(50),
   @PAGES                integer         
AS
BEGIN
    BEGIN TRY 
        
        DECLARE @BID VARCHAR(7)
        EXEC GENERATE_IDBOOK @BID OUT

        INSERT INTO BOOK(BID, TITTLE, AUTHOR, PUBLISHINGYEAR, GENRE,COUNTRY, LANGUAGE_BOOK, PRICE, DURATION, HASLEFT, PATHIMAGE, PAGES) VALUES(@BID, @TITTLE, @AUTHOR, @PUBLISHINGYEAR, @GENRE,@COUNTRY, @LANGUAGE_BOOK, @PRICE, @DURATION, @HASLEFT, @PATHIMAGE, @PAGES)
    END TRY 

    BEGIN CATCH
        RAISERROR('INSERT BOOK ERRO!', 16, 1)
    END CATCH
END



------------------------------------------INSERT USERS
--------------------INSERT CLIENT
GO
CREATE PROC INSERT_CLIENT
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        DECLARE @GETDATE DATETIME
        SET @GETDATE = GETDATE()
        INSERT INTO CLIENT(ID, CREATEDATE) VALUES(@ID, @GETDATE)
    END TRY 

    BEGIN CATCH
        RAISERROR ('NOT INSER CLIENT', 16, 1)
    END CATCH
END

--------------------INSERT LIBRARIAN
GO
CREATE PROC INSERT_LIBRARIAN 
    @ID VARCHAR(7),
    @DPM_ID VARCHAR(7),
    @DEPARTMENT VARCHAR(30)
AS 
BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1 FROM DEPARTMENT WHERE @DPM_ID = DPM_ID)
        BEGIN 
            RAISERROR('DEPARTMENT IS ALDREADY', 16, 1)
            RETURN
        END 

        DECLARE @GETDATE DATETIME = GETDATE()
        INSERT INTO LIBRARYRIAN(ID, DPM_ID, DEPARTMENT, CREATEDDATE) VALUES(@ID, @DPM_ID, @DEPARTMENT, @GETDATE)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT LIBRARIAN', 16, 1);
    END CATCH
END 

--------------------INSERT ADMIN
GO
CREATE PROC INSERT_ADMIN
    @ID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        INSERT INTO ADMIN(ID) VALUES(@ID)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT ADMIN', 16, 1);
    END CATCH
END 

--GENERATE ID USER
GO
CREATE PROC GENERATE_IDUSER
    @ID_USER VARCHAR(7) OUT
AS
BEGIN 
    BEGIN TRY 
        SET @ID_USER = 'UID_001'
        DECLARE @V_FRAME_USER VARCHAR(7) = 'UID_'
        DECLARE @I INT = 1 


        WHILE(EXISTS(SELECT 1 FROM USERS WHERE ID = @ID_USER))
        BEGIN 
            SET @ID_USER = @V_FRAME_USER + REPLICATE('0', 3-LEN(@I)) + CAST(@I AS NVARCHAR(3))
            SET @I = @I +1
        END 
    END TRY

    BEGIN CATCH 
        RAISERROR('NOT GENERATE ID USER', 16, 1)
    END CATCH
END
--INSERT ACCOUT
GO
CREATE PROC INSERT_ACCOUNT
    @ID VARCHAR(7),
    @USERNAME VARCHAR(30),
    @PASS     VARCHAR(200)  
AS 
BEGIN
    BEGIN TRY
        IF EXISTS(SELECT 1 FROM ACCOUNT WHERE @ID = ID)
        BEGIN
            RAISERROR('ID ALREADY EXISTS', 16,1)
            RETURN
        END
        INSERT INTO ACCOUNT(ID, USERNAME, [PASSWORD]) VALUES(@ID, @USERNAME, @PASS)
    END TRY
    BEGIN CATCH
        RAISERROR('NOT INSERT ACCOUNT', 16, 1)
    END CATCH 
END 
GO 
CREATE PROC INSERT_USERS
    @USERNAME             varchar(30),
    @PASS                 varchar(200),
    @ADDRESS_U            varchar(50),
    @EMAIL                varchar(50),
    @PHONENUMBER          varchar(12),
    @LASTNAME             nvarchar(50),
    @FIRSTNAME            nvarchar(50),
    @TYPE_USER            varchar(30),
    @GENRE                VARCHAR(10)
AS
BEGIN
    BEGIN TRY

        DECLARE @ID VARCHAR(7) 
        EXEC GENERATE_IDUSER @ID OUT
        INSERT INTO USERS(ID, ADDRESS_U, EMAIL, PHONENUMBER, ISACTIVE, LASTNAME, FIRSTNAME, TYPE_USER, GENRE) 
        VALUES(@ID, @ADDRESS_U, @EMAIL, @PHONENUMBER, 1, @LASTNAME, @FIRSTNAME, @TYPE_USER, @GENRE)

        EXEC INSERT_ACCOUNT @ID, @USERNAME, @PASS

        UPDATE USERS
        SET USERNAME = @USERNAME
        WHERE ID = @ID
        
        --INSERT TYPE USER
        IF(@TYPE_USER = 'CLIENT')
        BEGIN
            EXEC INSERT_CLIENT @ID
        END
        ELSE IF (@TYPE_USER = 'ADMIN')
            EXEC INSERT_ADMIN @ID
    END TRY

    BEGIN CATCH 
        RAISERROR('USER NOT INSERT', 16, 1)
    END CATCH 
END

--------------------INSERT BOOK FAVORITES
GO
CREATE PROC iNSERT_BOOK_FAVORITES
    @ID VARCHAR(7),
    @BID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        IF EXISTS (SELECT 1 FROM BOOK WHERE BID = @BID)
        BEGIN
            RAISERROR('BOOK ID IS ERRO', 16,1)
            RETURN
        END
        
        IF EXISTS (SELECT 1 FROM CLIENT WHERE ID = @ID)
        BEGIN
            RAISERROR('CLIENT ID IS ERRO', 16,1)
            RETURN
        END

        INSERT INTO FAVORITES(ID, BID) VALUES(@ID, @BID)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT FAVORITES', 16, 1);
    END CATCH
END 

--------------------DELETE FAVORITES
GO 
CREATE PROC DELETE_FAVORITES 
    @ID VARCHAR(7),
    @BID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        DELETE FROM FAVORITES WHERE ID = @ID AND @BID = BID
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT DELETE FAVORITES', 16, 1);
    END CATCH
END 





---------------------------------------- CLIENT
--------------------/HOME---SEARCH BOOK
GO
CREATE PROC SEARCH_BOOK
    @NAME_BOOK VARCHAR(50)
AS
 
BEGIN
    BEGIN TRY 
        SELECT * FROM BOOK WHERE TITTLE LIKE CONCAT('%', @NAME_BOOK, '%')
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT SEARCH BOOK', 16, 1);
    END CATCH
END 

--------------------/HOME---READ LIST BOOK
GO
CREATE PROC READ_BOOK
AS
BEGIN
    BEGIN TRY
        SELECT * FROM BOOK
    END TRY

    BEGIN CATCH
        RAISERROR('READ BOOKS ERRO!', 16, 1)
    END CATCH
END
--------------------/HISTORY---READ HISTORY
GO
CREATE PROC READ_HISTORY 
    @ID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        SELECT * FROM TRANSACTIONS T JOIN DETAILED_TRANS DT ON T.TID = DT.TID WHERE T.LI_ID = @ID
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT READ HISTORY', 16, 1);
    END CATCH
END 
--------------------/HISTORY--- SEARCH HISTORY
-- GO
-- CREATE PROC FIND_HISTORY
--     @ID VARCHAR(7),
--     @SEARCH VARCHAR(150)
-- AS 
-- BEGIN
--     BEGIN TRY 
--         SELECT * 
--         FROM TRANSACTIONS T JOIN DETAILED_TRANS DT ON T.TID = DT.TID 
--         WHERE T.LI_ID = @ID AND 
--     END TRY 

--     BEGIN CATCH
--         RAISERROR('NOT INSERT LIBRARIAN', 16, 1);
--     END CATCH
-- END 

--------------------/MYINTERESTINGBOOK---READ LIST BOOOK
GO
CREATE PROC READ_FAVORITES
    @ID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        SELECT * FROM FAVORITES WHERE ID = @ID
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT READ FAVORITES', 16, 1);
    END CATCH
END 

--------------------/VIEWPROFILE-- READ PROFILE
GO
CREATE PROC READ_PROFILE 
    @ID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        SELECT * 
        FROM USERS U JOIN CLIENT C ON U.ID = C.ID JOIN BANK_ACCOUNT_NUMBER BA ON BA.ID = C.ID
        WHERE U.ID = @ID  
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT READ PROFILE', 16, 1);
    END CATCH
END 

--------------------/VIEWPROFILE--- CHANGE PASSWORD
GO
CREATE PROC CHANGE_PASSWORD_CLIENT
    @ID VARCHAR(7),
    @PASS VARCHAR(200)
AS 
BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1 FROM ACCOUNT WHERE ID = @ID)
        BEGIN
            RAISERROR('NOT ACCOUNT', 16,1)
            RETURN
        END 

        UPDATE ACCOUNT
        SET [PASSWORD] = @PASS
        WHERE ID = @ID

    END TRY 

    BEGIN CATCH
        RAISERROR('NOT UPDATE CLIENT PASSWORD', 16, 1);
    END CATCH
END 

--------------------/VIEWPROFILE---AUTHENTICATION
GO
CREATE PROC READ_PASSWORD
    @ID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        SELECT [PASSWORD] FROM ACCOUNT WHERE @ID = ID 
    END TRY 

    BEGIN CATCH
        -- RAISERROR('NOT READ PASSWORD', 16, 1);
    END CATCH
END 
--------------------/AccountUpdate--- Update infomaiton
GO
CREATE PROC UPDATE_INFORMATION_CLIENT
    @ID                   VARCHAR(7),
    @ADDRESS_U            varchar(50),
    @EMAIL                varchar(50),
    @PHONENUMBER          varchar(12),
    @LASTNAME             varchar(50),
    @FIRSTNAME            varchar(50),
    @GENRE                VARCHAR(10),
    @BANKID             VARCHAR(150),
    @BANKACCNUM           VARCHAR(15)
AS 
BEGIN
    BEGIN TRY 
        IF NOT EXISTS (SELECT 1 FROM USERS WHERE ID = @ID)
        BEGIN
            RAISERROR('NOT HAVE ID USER', 16,1)
            RETURN
        END

    UPDATE BANK_ACCOUNT_NUMBER
    SET BANKACCNUM = @BANKACCNUM, IDBANK = @BANKID
    WHERE ID = @ID

    UPDATE USERS
    SET ADDRESS_U = @ADDRESS_U, EMAIL =@EMAIL, PHONENUMBER = @PHONENUMBER, LASTNAME = @LASTNAME, FIRSTNAME = @FIRSTNAME, GENRE = @GENRE
    WHERE ID = @ID

    END TRY 

    BEGIN CATCH
        RAISERROR('NOT UPDATE INFORMATION CLIENT', 16, 1);
    END CATCH
END 

GO 
create PROC INSERT_FAVORITES_BOOK
    @UID VARCHAR(7),
    @BID VARCHAR(7)
AS 
BEGIN
    BEGIN TRY 
        INSERT INTO FAVORITES(ID, BID) VALUES(@UID, @BID)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT UPDATE INFORMATION CLIENT', 16, 1);
    END CATCH
END 


SELECT * FROM FAVORITES


SELECT * FROM ACCOUNT